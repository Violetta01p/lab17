import asyncio
import json
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = "7067961074:AAERLRGNJg_41ZeZfw-TRHmz_ZjdA2IF7co"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

NOTES_FILE = 'notes.json'

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏/–∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏
def load_notes():
    try:
        with open(NOTES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_notes(notes):
    with open(NOTES_FILE, 'w', encoding='utf-8') as f:
        json.dump(notes, f, ensure_ascii=False, indent=2)

# –°—Ç–∞–Ω–∏ FSM
class AddNote(StatesGroup):
    waiting_for_note = State()

class SearchNote(StatesGroup):
    waiting_for_keyword = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ—Ç–∞—Ç–∫–∞–º–∏. –°–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥–∏: /add, /list, /search")

# –î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É
@dp.message(Command("add"))
async def add_cmd(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏:")
    await state.set_state(AddNote.waiting_for_note)

@dp.message(AddNote.waiting_for_note)
async def save_note(message: Message, state: FSMContext):
    notes = load_notes()
    notes.append(message.text)
    save_notes(notes)
    await message.answer("‚úÖ –ù–æ—Ç–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    await state.clear()

# –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏
@dp.message(Command("list"))
async def list_cmd(message: Message):
    notes = load_notes()
    if not notes:
        await message.answer("–ù–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫.")
    else:
        result = "\n\n".join(f"{i+1}. {note}" for i, note in enumerate(notes))
        await message.answer(f"üìù –°–ø–∏—Å–æ–∫ –Ω–æ—Ç–∞—Ç–æ–∫:\n\n{result}")

# –ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–æ–∫
@dp.message(Command("search"))
async def search_cmd(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É:")
    await state.set_state(SearchNote.waiting_for_keyword)

@dp.message(SearchNote.waiting_for_keyword)
async def search_note(message: Message, state: FSMContext):
    keyword = message.text.lower()
    notes = load_notes()
    found = [note for note in notes if keyword in note.lower()]
    if found:
        result = "\n\n".join(found)
        await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ:\n\n{result}")
    else:
        await message.answer("üòï –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
